@page "/change-password"
@using ImpowerSurvey.Components.Utilities
@using ImpowerSurvey.Services
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject UserService UserService
@inject NotificationService NotificationService

<PageTitle>@nameof(ImpowerSurvey)</PageTitle>

<RadzenCard Class="rz-my-12 rz-mx-auto rz-p-4 rz-p-md-12" Style="max-width: 600px; margin-top: 80px;">
    <RadzenStack Style="width: 100%" Orientation="Orientation.Vertical" Gap="1rem" Class="rz-p-2">
        <RadzenText TextStyle="TextStyle.H4" TagName="TagName.H2" Class="rz-mb-8">Password Change Required</RadzenText>
        <RadzenText TextStyle="TextStyle.Body1" TagName="TagName.P">
            You need to change your password before you can continue.
        </RadzenText>

        <RadzenTemplateForm TItem="PasswordChangeModel" Data="@Model" Submit="OnSubmit">
            <RadzenAlert Icon="password" AllowClose="false" AlertStyle="AlertStyle.Info">
                @Constants.UI.PasswordRequirements
            </RadzenAlert>
            <RadzenFormField Text="Password" Style="margin-top: 1rem;">
                <RadzenPassword Name="txtPassword" @bind-Value="@Model.Password"/>
                <RadzenRequiredValidator Component="txtPassword" Text="" Style="position: absolute"/>
                <RadzenCustomValidator Component="txtPassword" Text="Password doesn't meet complexity requirements" Validator="@(() => Constants.UI.PasswordValidator(Model.Password))"/>
            </RadzenFormField>
            <RadzenFormField Text="Repeat Password" Style="margin-top: 1rem;">
                <RadzenPassword Name="txtRepeatPassword" @bind-Value="@Model.RepeatPassword"/>
                <RadzenRequiredValidator Component="txtRepeatPassword" Text="" Style="position: absolute"/>
                <RadzenCustomValidator Component="txtRepeatPassword" Text="Password doesn't meet complexity requirements" Validator="@(() => Constants.UI.PasswordValidator(Model.RepeatPassword))"/>
                <RadzenCompareValidator Visible="@(!string.IsNullOrEmpty(Model.RepeatPassword))" Value="@Model.Password" Component="txtRepeatPassword" Text="Passwords do not match" Style="position: absolute"/>
            </RadzenFormField>

            <div class="rz-mt-4 rz-d-flex rz-flex-row-reverse">
                <RadzenButton ButtonType="ButtonType.Submit" Text="Change Password" ButtonStyle="ButtonStyle.Primary" Icon="check_circle" />
            </div>
        </RadzenTemplateForm>
    </RadzenStack>
</RadzenCard>

@code {
    private Guid? UserId => CustomAuthStateProvider.Get(AuthStateProvider).GetPendingPasswordChangeUserId();
    private PasswordChangeModel Model { get; set; } = new();

    protected override void OnInitialized()
    {
        if (UserId == null)
            NavigationManager.NavigateTo("/login");
    }

    private async Task OnSubmit()
    {
        try
        {
            if (UserId == null)
            {
                NotificationService.Notify(NotificationSeverity.Error, "Error", "Invalid session. Please try logging in again.");
                NavigationManager.NavigateTo("/login");
                return;
            }

            var result = await UserService.ChangePasswordAsync(UserId.Value, Model.Password);
            NotificationService.NotifyFromServiceResult(result);
            if (result.Successful)
            {
                var authStateProvider = CustomAuthStateProvider.Get(AuthStateProvider);
                authStateProvider.ClearPendingPasswordChangeUserId();
                await authStateProvider.LogoutAsync();
                NavigationManager.NavigateTo("/login");
            }

        }
        catch (Exception ex)
        {
            NotificationService.NotifyFromException(ex);
        }
    }

    public class PasswordChangeModel
    {
        public string Password { get; set; }
        public string RepeatPassword { get; set; }
    }
}