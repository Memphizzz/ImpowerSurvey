using ImpowerSurvey.Components.Model;

namespace ImpowerSurvey.Services
{
    /// <summary>
    /// Test implementation of the ClaudeService that can be used when API key is not available
    /// or during development to avoid unnecessary API calls.
    /// </summary>
    public class ClaudeServiceTest : IClaudeService
    {
        private readonly ILogger<ClaudeServiceTest> _logger;
        
        public ClaudeServiceTest(ILogger<ClaudeServiceTest> logger, ISettingsService settingsService)
        {
            _logger = logger;
        }

        public async Task InitializeAsync()
        {
            _logger.LogInformation("ClaudeServiceTest initialized - using test implementation");
            await Task.CompletedTask;
        }

        public async Task<string> AnonymizeTextAsync(string text)
        {
            if (string.IsNullOrEmpty(text))
				return text;

			_logger.LogInformation("Using test anonymization for text: {TextPreview}", 
								   text.Length > 20 ? text.Substring(0, 20) + "..." : text);
            
            // Simple test implementation that replaces potential identifiers with generic terms
            var anonymized = text
                .Replace("I ", "One ")
                .Replace("my ", "their ")
                .Replace("we ", "they ")
                .Replace("our ", "their ")
                .Replace("mine", "theirs");
            
            await Task.Delay(100); // Simulate API delay
            
            return "ANONYMIZED: " + anonymized;
        }

        public async Task<List<string>> BatchAnonymizeAsync(List<string> texts)
        {
            if (texts == null || texts.Count == 0)
                return [];

            _logger.LogInformation("Test batch anonymizing {Count} responses", texts.Count);
            
            var results = new List<string>();
            foreach (var text in texts)
            {
                var anonymized = await AnonymizeTextAsync(text);
                results.Add(anonymized);
            }

            return results;
        }

        public async Task<string> GenerateSurveySummaryAsync(Survey survey, List<Response> responses)
        {
            if (survey == null || responses == null || responses.Count == 0)
				return "Insufficient data to generate summary.";

			_logger.LogInformation("Generating test summary for survey: {SurveyTitle} with {ResponseCount} responses", 
								   survey.Title, responses.Count);
            
            await Task.Delay(500); // Simulate API delay
            
            return @"# Survey Summary Report (Test Mode)

## Overview
This is a test summary for the survey titled '" + survey.Title + @"'.

## Key Trends
- Several participants mentioned topic X
- Most respondents indicated satisfaction with Y
- Areas of improvement include Z

## Sentiment Analysis
Overall sentiment appears to be positive, with some constructive criticism provided.

## Main Themes
1. Theme One
2. Theme Two
3. Theme Three

## Notable Feedback
Some unique perspectives were shared that deserve special attention...

## Recommendations
Based on the feedback, consider implementing the following changes...

*Note: This is a test summary generated by ClaudeServiceTest. In production, this would be replaced with actual AI-generated analysis.*";
        }

		public async Task<List<string>> GetAvailableModelsAsync() => ["claude-3-7-sonnet-20250219"];
	}
}